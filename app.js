// app.js

let tg = window.Telegram.WebApp;
tg.expand();

// üëá –í–ê–® –ê–ö–¢–£–ê–õ–¨–ù–´–ô URL –î–õ–Ø GOOGLE SCRIPT (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç)
const GOOGLE_SCRIPT_URL = "https://script.google.com/macros/s/AKfycbxz1dBeoo0ZxD65no4_jrYqslqoFYn93TrVXUbd2r5XNjkCN8ME5ipehBQug6IGoNSjHw/exec"; // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –ê–ö–¢–£–ê–õ–¨–ù–´–ô URL

const events = [
  {
    id: 1,
    title: "¬´–ê–±–∞–π¬ª –æ–ø–µ—Ä–∞—Å—ã",
    place: "–°.–°–µ–π—Ñ—É–ª–ª–∏–Ω –∞—Ç—ã–Ω–¥–∞“ì—ã “õ–∞–∑–∞“õ –¥—Ä–∞–º–∞ —Ç–µ–∞—Ç—Ä—ã",
    image: "https://raw.githubusercontent.com/Aibynz/Tiketon/refs/heads/main/image1.jpg"
  },
  {
    id: 2,
    title: "–ï—Ä–ª–∞–Ω –ö”©–∫–µ–µ–≤ –∫–æ–Ω—Ü–µ—Ä—Ç—ñ",
    place: "–û—Ä—Ç–∞–ª—ã“õ –∫–æ–Ω—Ü–µ—Ä—Ç –∑–∞–ª—ã",
    image: "https://raw.githubusercontent.com/Aibynz/Tiketon/refs/heads/main/image2.jpg"
  },
  {
    id: 3,
    title: "¬´“ö—ã–∑ –ñ—ñ–±–µ–∫¬ª —Å–ø–µ–∫—Ç–∞–∫–ª—ñ",
    place: "–ñ–∞—Å—Ç–∞—Ä —Ç–µ–∞—Ç—Ä—ã",
    image: "https://raw.githubusercontent.com/Aibynz/Tiketon/refs/heads/main/image3.jpg"
  }
];

const dateList = (() => {
  const now = new Date();
  const dates = [];
  for (let i = 0; i < 7; i++) {
    const date = new Date(now);
    date.setDate(now.getDate() + i);
    dates.push(date.toISOString().split("T")[0]); // –§–æ—Ä–º–∞—Ç YYYY-MM-DD
  }
  return dates;
})();

let selectedEvent = null;
let selectedSeats = [];
let selectedDate = "";
let selectedTime = "16:00"; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
let bookedSeats = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –∑–∞–Ω—è—Ç—ã—Ö –º–µ—Å—Ç

const eventList = document.getElementById("eventList");
const bookingSection = document.getElementById("bookingSection");
const eventTitle = document.getElementById("eventTitle");
const seatTable = document.querySelector("#seatTable tbody");
const confirmBtn = document.getElementById("confirmBtn");
const dateSelect = document.getElementById("dateSelect");
const timeSelect = document.getElementById("timeSelect");
const customerNameInput = document.getElementById("customerName");
const customerPhoneInput = document.getElementById("customerPhone");

events.forEach(ev => {
  const card = document.createElement("div");
  card.className = "bg-white border border-gray-200 rounded-lg shadow hover:shadow-lg transition";
  card.innerHTML = `
    <div class="p-4">
      <h3 class="text-lg font-bold text-blue-800">${ev.title}</h3>
      <p class="text-sm text-gray-600">${ev.place}</p>
      <img src="${ev.image || 'https://via.placeholder.com/150'}" alt="${ev.title}" class="w-full h-auto object-cover rounded mb-3">
      <button class="mt-3 w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700"
        onclick="selectEvent(${ev.id})">
        –¢–∞“£–¥–∞—É
      </button>
    </div>
  `;
  eventList.appendChild(card);
});

function selectEvent(id) {
  selectedEvent = events.find(e => e.id === id);
  selectedSeats = []; 
  bookedSeats = []; 
  eventTitle.textContent = selectedEvent.title + " | " + selectedEvent.place;
  bookingSection.classList.remove("hidden");

  dateSelect.innerHTML = "";
  dateList.forEach(dateStr => {
    const option = document.createElement("option");
    option.value = dateStr;
    const displayDate = new Date(dateStr).toLocaleDateString('kk-KZ', { day: 'numeric', month: 'long', year: 'numeric' });
    option.textContent = displayDate;
    dateSelect.appendChild(option);
  });
  selectedDate = dateList[0]; 
  dateSelect.value = selectedDate;

  selectedTime = timeSelect.options[0].value; 
  timeSelect.value = selectedTime;

  fetchBookedSeats();
}

dateSelect.onchange = () => {
  selectedDate = dateSelect.value;
  selectedSeats = []; 
  fetchBookedSeats();
};
timeSelect.onchange = () => {
  selectedTime = timeSelect.value;
  selectedSeats = []; 
  fetchBookedSeats();
};

async function fetchBookedSeats() {
  if (!selectedEvent || !selectedDate || !selectedTime) {
    console.warn("fetchBookedSeats: –ù–µ –≤—ã–±—Ä–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ, –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è. –ö–∞—Ä—Ç–∞ –º–µ—Å—Ç –Ω–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞.");
    bookedSeats = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    drawSeatMap(); 
    return;
  }

  seatTable.innerHTML = '<tr><td colspan="11" class="p-4 text-center">–û—Ä—ã–Ω–¥–∞—Ä –∂“Ø–∫—Ç–µ–ª—É–¥–µ...</td></tr>';
  
  const urlParams = new URLSearchParams({
      action: "getBookedSeats",
      title: selectedEvent.title,
      date: selectedDate,
      time: selectedTime
  });
  const requestUrl = `${GOOGLE_SCRIPT_URL}?${urlParams.toString()}`;
  
  console.log("–ó–ê–ü–†–û–° –ö GOOGLE SCRIPT (fetchBookedSeats):", requestUrl);

  try {
    const response = await fetch(requestUrl);
    const responseDataText = await response.text(); 
    console.log("–û—Ç–≤–µ—Ç –æ—Ç Google Script (—Ç–µ–∫—Å—Ç, fetchBookedSeats):", responseDataText);

    if (!response.ok) {
        let errorData;
        try { errorData = JSON.parse(responseDataText); } 
        catch (e) { errorData = { error: "Fetch error (fetchBookedSeats), could not parse JSON from error response", details: responseDataText }; }
        console.error("–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ (Google Script) –ø—Ä–∏ fetchBookedSeats:", response.status, errorData);
        alert(`–û—Ä—ã–Ω–¥–∞—Ä —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: ${errorData.error || response.statusText}. –¢–æ–ª—ã“ì—ã—Ä–∞“õ –∫–æ–Ω—Å–æ–ª—å–¥–∞.`);
        bookedSeats = []; // –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤—Å–µ —Å–≤–æ–±–æ–¥–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    } else {
        try {
            const data = JSON.parse(responseDataText);
            console.log("–û—Ç–≤–µ—Ç –æ—Ç Google Script (JSON parsed, fetchBookedSeats):", data);
            if (data.success === false) { 
                 console.error("Google Script –≤–µ—Ä–Ω—É–ª success:false (fetchBookedSeats):", data.error, data.details);
                 alert(`–û—Ä—ã–Ω–¥–∞—Ä–¥—ã –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ —Å–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ: ${data.error || '–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ'}.`);
                 bookedSeats = [];
            } else {
                bookedSeats = data.booked || []; // –û–∂–∏–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ ['1-“õ–∞—Ç–∞—Ä 1-–æ—Ä—ã–Ω', ...]
            }
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Google Script (fetchBookedSeats):", e, "–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", responseDataText);
            alert("–û—Ä—ã–Ω–¥–∞—Ä —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ –∂–∞—É–∞–ø —Ñ–æ—Ä–º–∞—Ç—ã “õ–∞—Ç–µ.");
            bookedSeats = [];
        }
    }
  } catch (err) {
    console.error("–û—Ä—ã–Ω–¥–∞—Ä–¥—ã –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ –∂–µ–ª—ñ –Ω–µ–º–µ—Å–µ CORS “õ–∞—Ç–µ (fetchBookedSeats):", err);
    alert("–û—Ä—ã–Ω–¥–∞—Ä–¥—ã –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ –∂–µ–ª—ñ “õ–∞—Ç–µ—Å—ñ –Ω–µ–º–µ—Å–µ CORS —Å–∞—è—Å–∞—Ç—ã–º–µ–Ω –±–ª–æ–∫—Ç–∞—É. –ö–æ–Ω—Å–æ–ª—å–¥—ã —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑.");
    bookedSeats = []; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç—ã—Ö –º–µ—Å—Ç–∞—Ö
  }
  console.log("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ bookedSeats –≤ app.js (–ø–æ—Å–ª–µ fetchBookedSeats):", JSON.stringify(bookedSeats));
  drawSeatMap();
}

function drawSeatMap() {
  seatTable.innerHTML = "";
  console.log("drawSeatMap –≤—ã–∑–≤–∞–Ω–∞. bookedSeats:", JSON.stringify(bookedSeats), "selectedSeats:", JSON.stringify(selectedSeats));
  for (let row = 1; row <= 10; row++) {
    const tr = document.createElement("tr");
    const rowLabel = document.createElement("td");
    rowLabel.textContent = `${row}-“õ–∞—Ç–∞—Ä`;
    rowLabel.className = "p-1 font-medium bg-gray-100 text-xs sm:text-sm text-center";
    tr.appendChild(rowLabel);

    for (let col = 1; col <= 10; col++) {
      const seatId = `${row}-“õ–∞—Ç–∞—Ä ${col}-–æ—Ä—ã–Ω`;
      const td = document.createElement("td");
      td.textContent = col;
      td.dataset.seatId = seatId;
      let baseClasses = "p-2 border text-xs sm:text-sm text-center ";

      if (bookedSeats.includes(seatId)) {
        td.className = baseClasses + "bg-red-300 text-gray-600 cursor-not-allowed";
        td.title = "–ë“±–ª –æ—Ä—ã–Ω –±–æ—Å –µ–º–µ—Å";
      } else {
        td.className = baseClasses + "cursor-pointer bg-gray-50 hover:bg-green-300";
        td.onclick = () => toggleSeat(td, seatId);
        if (selectedSeats.includes(seatId)) {
          td.classList.remove("bg-gray-50", "hover:bg-green-300");
          td.classList.add("bg-green-500", "text-white");
        }
      }
      tr.appendChild(td);
    }
    seatTable.appendChild(tr);
  }
}

function toggleSeat(td, seatId) {
  const index = selectedSeats.indexOf(seatId);
  if (index > -1) {
    selectedSeats.splice(index, 1);
    td.classList.remove("bg-green-500", "text-white");
    td.classList.add("bg-gray-50", "hover:bg-green-300");
  } else {
    selectedSeats.push(seatId);
    td.classList.remove("bg-gray-50", "hover:bg-green-300");
    td.classList.add("bg-green-500", "text-white");
  }
}

confirmBtn.onclick = async () => {
  const customerName = customerNameInput.value.trim();
  const customerPhone = customerPhoneInput.value.trim();

  if (!selectedEvent || selectedSeats.length === 0 || !customerName || !customerPhone) {
    alert("–ë–∞—Ä–ª—ã“õ ”©—Ä—ñ—Å—Ç–µ—Ä–¥—ñ —Ç–æ–ª—Ç—ã—Ä—ã“£—ã–∑ –∂”ô–Ω–µ –∫–µ–º—ñ–Ω–¥–µ –±—ñ—Ä –æ—Ä—ã–Ω–¥—ã —Ç–∞“£–¥–∞“£—ã–∑.");
    if (!customerName) customerNameInput.focus();
    else if (!customerPhone) customerPhoneInput.focus();
    return;
  }

  confirmBtn.disabled = true;
  confirmBtn.textContent = "–¢–µ–∫—Å–µ—Ä—É...";

  let currentBookedSeatsCheck;
  try {
    const checkUrlParams = new URLSearchParams({
        action: "getBookedSeats",
        title: selectedEvent.title,
        date: selectedDate,
        time: selectedTime
    });
    const checkRequestUrl = `${GOOGLE_SCRIPT_URL}?${checkUrlParams.toString()}`;
    console.log("–ó–ê–ü–†–û–° –ö GOOGLE SCRIPT (confirmBtn check):", checkRequestUrl);

    const responseCheck = await fetch(checkRequestUrl);
    const responseDataTextCheck = await responseCheck.text();
    console.log("–û—Ç–≤–µ—Ç –æ—Ç Google Script –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ (—Ç–µ–∫—Å—Ç, confirmBtn):", responseDataTextCheck);

    if (!responseCheck.ok) {
        let errorDataCheck;
        try { errorDataCheck = JSON.parse(responseDataTextCheck); }
        catch (e) { errorDataCheck = { error: "Fetch error during confirm, could not parse JSON", details: responseDataTextCheck }; }
        console.error("–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ (Google Script) –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Å—Ç (confirmBtn):", responseCheck.status, errorDataCheck);
        alert(`–û—Ä—ã–Ω–¥–∞—Ä–¥—ã —Ç–µ–∫—Å–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: ${errorDataCheck.error || responseCheck.statusText}.`);
        confirmBtn.disabled = false;
        confirmBtn.textContent = "üì© –ë—Ä–æ–Ω–¥–∞—É";
        return;
    }
    
    try {
        const dataCheck = JSON.parse(responseDataTextCheck);
        console.log("–û—Ç–≤–µ—Ç –æ—Ç Google Script –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ (JSON parsed, confirmBtn):", dataCheck);
        if (dataCheck.success === false) {
            console.error("Google Script –≤–µ—Ä–Ω—É–ª success:false –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ (confirmBtn):", dataCheck.error, dataCheck.details);
            alert(`–û—Ä—ã–Ω–¥–∞—Ä–¥—ã —Ç–µ–∫—Å–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ —Å–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ: ${dataCheck.error || '–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ'}.`);
            confirmBtn.disabled = false;
            confirmBtn.textContent = "üì© –ë—Ä–æ–Ω–¥–∞—É";
            return;
        }
        currentBookedSeatsCheck = dataCheck.booked || [];
    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Google Script –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ (confirmBtn):", e, "–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", responseDataTextCheck);
        alert("–û—Ä—ã–Ω–¥–∞—Ä–¥—ã —Ç–µ–∫—Å–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ –∂–∞—É–∞–ø —Ñ–æ—Ä–º–∞—Ç—ã “õ–∞—Ç–µ.");
        confirmBtn.disabled = false;
        confirmBtn.textContent = "üì© –ë—Ä–æ–Ω–¥–∞—É";
        return;
    }

    console.log("–ú–µ—Å—Ç–∞, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (confirmBtn):", JSON.stringify(selectedSeats));
    console.log("–ó–∞–Ω—è—Ç—ã–µ –º–µ—Å—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ (confirmBtn):", JSON.stringify(currentBookedSeatsCheck));

    const newlyBookedByOthers = selectedSeats.filter(seat => currentBookedSeatsCheck.includes(seat));

    if (newlyBookedByOthers.length > 0) {
      alert(`–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –∫–µ–ª–µ—Å—ñ –æ—Ä—ã–Ω–¥–∞—Ä ('${newlyBookedByOthers.join(', ')}') —Å—ñ–∑ —Ç–∞“£–¥–∞—É –∂–∞—Å–∞–ø –∂–∞—Ç“õ–∞–Ω–¥–∞ –±—Ä–æ–Ω–¥–∞–ª—ã–ø –∫–µ—Ç—Ç—ñ –Ω–µ–º–µ—Å–µ “õ–∞–∑—ñ—Ä “õ–æ–ª–∂–µ—Ç—ñ–º—Å—ñ–∑. –¢–∞–ø—Å—ã—Ä—ã—Å –∂–∞“£–∞—Ä—Ç—ã–ª–∞–¥—ã, –±–∞—Å“õ–∞ –æ—Ä—ã–Ω–¥–∞—Ä–¥—ã —Ç–∞“£–¥–∞“£—ã–∑.`);
      bookedSeats = currentBookedSeatsCheck; // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π bookedSeats
      selectedSeats = selectedSeats.filter(seat => !newlyBookedByOthers.includes(seat)); // –£–±–∏—Ä–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
      drawSeatMap();
      confirmBtn.disabled = false;
      confirmBtn.textContent = "üì© –ë—Ä–æ–Ω–¥–∞—É";
      return;
    }

    const dataToSend = {
      event: {
          id: selectedEvent.id,
          title: selectedEvent.title,
          place: selectedEvent.place,
          image: selectedEvent.image
      },
      seats: selectedSeats,
      date: selectedDate,
      time: selectedTime,
      customerName: customerName,
      customerPhone: customerPhone
    };

    console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram:", JSON.stringify(dataToSend));
    tg.sendData(JSON.stringify(dataToSend));
    // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–¥–µ—Å—å, —Ç.–∫. –æ–∂–∏–¥–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ WebApp –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ
    // confirmBtn.disabled = false;
    // confirmBtn.textContent = "üì© –ë—Ä–æ–Ω–¥–∞—É";

  } catch (err) {
    console.error("–ë—Ä–æ–Ω–¥–∞—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ (–æ–±—â–∏–π catch –≤ confirmBtn):", err);
    alert("–ë—Ä–æ–Ω–¥–∞—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞–π–ª–∞–Ω—ã—Å—ã“£—ã–∑–¥—ã —Ç–µ–∫—Å–µ—Ä—ñ–ø, “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.");
    confirmBtn.disabled = false;
    confirmBtn.textContent = "üì© –ë—Ä–æ–Ω–¥–∞—É";
  }
};

if (events.length > 0) {
  selectEvent(events[0].id);
}
